<?xml version="1.0" encoding="UTF-8"?>
<!--
 Phing build file for GoodsCatalog

 $Id$
 -->

<project name="goodscatalog" default="build" basedir="./">

	<property file="build.properties" />
	
	<!--
	=====================================================================
	Filesets definitions
	=====================================================================
	-->
	
	<!-- Source files -->
	<fileset dir="src" id="files.sources">
		<include name="**" />
		<exclude name=".svn" />
	</fileset>
	
		<!-- PHP source files -->
		<fileset dir="src" id="files.sources.php">
			<include name="**/.php" />
		</fileset>

	<!-- Unit tests -->
	<fileset dir="tests/phpunit" id="files.tests.unit">
		<include name="**/*Test.php" />
	</fileset>
	
	<!--
	=====================================================================
	Prepare for build
	=====================================================================
	-->

	<target name="prepare" depends="clean" description="Prepare for build">

		<echo msg="Build directory: ${build.dir}" level="info" />

		<echo msg="Create build directory..." level="info" />
		<mkdir dir="${build.dir}" />

		<phplint>
			<fileset refid="files.sources.php" />
		</phplint>
				
		<!--
			Run unit tests
		-->
		<if>
			<istrue value="${phpunit}" />
			<then>
			
				<phpunit haltonfailure="true">
					<formatter
						type="${phpunit.format}"
						usefile="${phpunit.save}"
						todir="${phpunit.output.dir}"
						outfile="${phpunit.output.file}"
					/>
					<batchtest name="AllTests">
						<fileset refid="files.tests.unit" />
					</batchtest>
				</phpunit>
				
			</then>
		</if>
		
		<!--
			Check sources for bad code
		-->
		<if>
			<istrue value="${phpmd}" />
			<then>
				<phpmd rulesets="${phpmd.rulesets}">
					<formatter
						type="${phpmd.format}"
						outfile="${phpmd.output}"
					/>
					<fileset refid="files.sources.php" />
				</phpmd>
			</then>
		</if>
		
		<!--
			Check sources for coding standards
		-->
		<if>
			<istrue value="${phpcs}" />
			<then>
				<phpcodesniffer
					standard="Eresus"
					haltonerror="false"
				>
					<formatter
						type="${phpcs.format}"
						outfile="${phpcs.output}"
					/>
					<fileset refid="files.sources.php" />
				</phpcodesniffer>
			</then>
		</if>

		<echo msg="Ready to build" level="info" />

	</target>

	<!--
	=====================================================================
	Clean up after build
	=====================================================================
	-->

	<target name="clean" description="Clean up build">

		<echo msg="Clean up: ${build.dir}..." level="info" />

		<if>
			<available file="${build.dir}" />

			<then>
				<delete includeemptydirs="true" failonerror="true">
					<fileset dir="${build.dir}">
						<include name="**" />
					</fileset>
				</delete>
			</then>

		</if>

	</target>

	<!--
	=====================================================================
	Build project
	=====================================================================
	-->

	<target name="build" depends="prepare" description="Build project">

		<copy todir="${build.dir}">
			<fileset refid="files.sources" />
			<filterchain>
			    <expandproperties />
		  </filterchain>
		</copy>

		<!--
			Build documentation
		-->
		<if>
			<istrue value="${docs}" />
			<then>
				<phingcall target="docs" />
			</then>
		</if>

	</target>

	<!--
	=====================================================================
	Build documentation
	=====================================================================
	-->
	<target name="docs" description="Generate documentation">

		<echo msg="Generating documentation..." level="info" />

		<phpdoc title="API Documentation"
		  destdir="${docs.dir}"
		  sourcecode="no"
			parseprivate="true"
		  output="${docs.converter}">
		   <fileset dir="${build.dir}">
		      <include name="**/*.php" />
		   </fileset>
		   <projdocfileset dir=".">
		      <include name="README" />
		      <include name="INSTALL" />
		      <include name="CHANGELOG" />
		   </projdocfileset>
		</phpdoc>

	</target>

	<!--
	=====================================================================
	Build distributive
	=====================================================================
	-->

	<target name="distr" depends="build" description="Build distributive">

		<available file="${distr.dir}" type="dir" property="distr.dir.exists" />
		
		<if>
			<not>
				<isset property="${distr.dir.exists}" />
			</not>
			
			<then>
				<mkdir dir="${distr.dir}" />
			</then>
			
		</if>
		
		<tar destfile="${distr.dir}/${phing.project.name}-${product.version}.tar.bz2" compression="bzip2">
			<fileset dir="${build.dir}">
				<include name="**" />
			</fileset>
		</tar>

	</target>

</project>
